# Copyright Louis Dionne 2013-2016
# Copyright Gonzalo BG 2014-2017
# Copyright Julian Becker 2015
# Copyright Manu SÃ¡nchez 2015
# Copyright Casey Carter 2015-2017
# Copyright Eric Niebler 2015-2016
# Copyright Paul Fultz II 2015-2016
# Copyright Jakub Szuppe 2016.

# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.txt or copy at http://boost.org/LICENSE_1_0.txt)

# Adapted from various sources, including:
# - Louis Dionne's Hana: https://github.com/ldionne/hana
# - Paul Fultz II's FIT: https://github.com/pfultz2/Fit
language: cpp
script: cmake

env:
  global:
    - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps

cache:
  directories:
    - ${DEPS_DIR}/cmake-${CMAKE_VERSION}

matrix:
  include:
    # - env: BUILD_TYPE=Release CPP=14 SYSTEM_LIBCXX=On
    #   os: osx
    #   compiler: clang

    # clang 5 C++11/14/1z Debug/Release libc++, 11 Debug libstdc++
    - env: CLANG_VERSION=6.0 BUILD_TYPE=Debug CPP=14 LIBCXX=On
      os: linux
      addons: &clang6
        apt:
          packages:
            - clang-6.0
          sources:
            - llvm-toolchain-trusty-6.0
            - ubuntu-toolchain-r-test

    - env: CLANG_VERSION=6.0 BUILD_TYPE=Release CPP=14 LIBCXX=On
      os: linux
      addons: *clang6

    - env: CLANG_VERSION=6.0 BUILD_TYPE=Debug CPP=17 LIBCXX=On
      os: linux
      addons: *clang6

    - env: CLANG_VERSION=6.0 BUILD_TYPE=Release CPP=17 LIBCXX=On
      os: linux
      addons: *clang6

    # gcc-6 C++11/14/1z Debug/Release
    - env: GCC_VERSION=6 BUILD_TYPE=Debug CPP=14
      os: linux
      addons: &gcc6
        apt:
          packages:
            - g++-6
          sources:
            - ubuntu-toolchain-r-test

    - env: GCC_VERSION=6 BUILD_TYPE=Release CPP=14
      os: linux
      addons: *gcc6

    - env: GCC_VERSION=6 BUILD_TYPE=Debug CPP=17
      os: linux
      addons: *gcc6

    - env: GCC_VERSION=6 BUILD_TYPE=Release CPP=17
      os: linux
      addons: *gcc6

    - env: GCC_VERSION=6 BUILD_TYPE=Debug CPP=17 CONCEPTS=On
      os: linux
      addons: *gcc6

    - env: GCC_VERSION=6 BUILD_TYPE=Release CPP=17 CONCEPTS=On
      os: linux
      addons: *gcc6

    # gcc-7 C++11/14/1z Debug/Release
    - env: GCC_VERSION=7 BUILD_TYPE=Debug CPP=14
      os: linux
      addons: &gcc7
        apt:
          packages:
            - g++-7
          sources:
            - ubuntu-toolchain-r-test

    - env: GCC_VERSION=7 BUILD_TYPE=Release CPP=14
      os: linux
      addons: *gcc7

    - env: GCC_VERSION=7 BUILD_TYPE=Debug CPP=17
      os: linux
      addons: *gcc7

    - env: GCC_VERSION=7 BUILD_TYPE=Release CPP=17
      os: linux
      addons: *gcc7

    - env: GCC_VERSION=7 BUILD_TYPE=Debug CPP=17 CONCEPTS=On
      os: linux
      addons: *gcc7

    - env: GCC_VERSION=7 BUILD_TYPE=Release CPP=17 CONCEPTS=On
      os: linux
      addons: *gcc7

    # gcc-8 C++11/14/1z Debug/Release
    - env: GCC_VERSION=8 BUILD_TYPE=Debug CPP=14
      os: linux
      addons: &gcc8
        apt:
          packages:
            - g++-8
          sources:
            - ubuntu-toolchain-r-test

    - env: GCC_VERSION=8 BUILD_TYPE=Release CPP=14
      os: linux
      addons: *gcc8

    - env: GCC_VERSION=8 BUILD_TYPE=Debug CPP=17
      os: linux
      addons: *gcc8

    - env: GCC_VERSION=8 BUILD_TYPE=Release CPP=17
      os: linux
      addons: *gcc8

    - env: GCC_VERSION=8 BUILD_TYPE=Debug CPP=17 CONCEPTS=On
      os: linux
      addons: *gcc8

    - env: GCC_VERSION=8 BUILD_TYPE=Release CPP=17 CONCEPTS=On
      os: linux
      addons: *gcc8

# Install dependencies
before_install:
  - export CHECKOUT_PATH=`pwd`;
  - |
    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      brew update
      brew install gnu-sed --with-default-names
      brew install gnu-which --with-default-names
    fi
  - |
    if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
      if [ -z "$(ls -A ${DEPS_DIR}/cmake-${CMAKE_VERSION}/cached)" ]; then
        CMAKE_URL="https://cmake.org/files/v3.6/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
        mkdir -p ${DEPS_DIR}/cmake-${CMAKE_VERSION}
        travis_retry wget --no-check-certificate --quiet -O - "${CMAKE_URL}" | tar --strip-components=1 -xz -C ${DEPS_DIR}/cmake-${CMAKE_VERSION}
        touch ${DEPS_DIR}/cmake-${CMAKE_VERSION}/cached
      else
        echo "Using cached cmake version ${CMAKE_VERSION}."
      fi
      export PATH="${DEPS_DIR}/cmake-${CMAKE_VERSION}/bin:${PATH}"
    else
      if ! brew ls --version cmake &>/dev/null; then brew install cmake; fi
    fi
  - if [ -n "$GCC_VERSION" ]; then export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}"; fi
  - if [ -n "$CLANG_VERSION" ]; then export CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}"; fi
  - which $CXX
  - which $CC
  - $CXX --version
  - if [ "$ASAN" == "On" ]; then export SANITIZER="Address;Undefined"; fi
  - if [ "$MSAN" == "On" ]; then export SANITIZER="MemoryWithOrigins"; fi
  - if [ -n "$CLANG_VERSION" ]; then sudo PATH="${PATH}" CXX="$CXX" CC="$CC" ./install_libcxx.sh; fi

install:
  - cd $CHECKOUT_PATH
  - mkdir -p build
  - cd build
  - |
    if [ "$LIBCXX" == "On" ]; then
      CXX_FLAGS="${CXX_FLAGS} -stdlib=libc++ -nostdinc++ -cxx-isystem /usr/include/c++/v1/ -Wno-unused-command-line-argument"
      CXX_LINKER_FLAGS="${CXX_LINKER_FLAGS} -lc++abi"
    fi
  # Required to test the C++ compiler since libc++ is compiled with ASan enabled:
  - if [ -n "$CLANG_VERSION" -a "$ASAN" == "On" -a "$LIBCXX" == "On" ]; then CXX_FLAGS="${CXX_FLAGS} -fsanitize=address"; fi
  # Required to test the C++ compiler since libc++ is compiled with MSan enabled:
  - if [ -n "$CLANG_VERSION" -a "$MSAN" == "On" -a "$LIBCXX" == "On" ]; then CXX_FLAGS="${CXX_FLAGS} -fsanitize=memory"; fi
  - if [ -n "$GCC_VERSION" -a "$CONCEPTS" == "On" ]; then CXX_FLAGS="${CXX_FLAGS} -fconcepts"; fi
  - cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" -DCMAKE_EXE_LINKER_FLAGS="${CXX_LINKER_FLAGS}" -DCMAKE_CXX_STANDARD=$CPP -DPUSHMI_CONCEPTS=$CONCEPTS -Wdev
  - make -j2 VERBOSE=1

script:
  - ctest -j2 -VV ${CTEST_FLAGS}

notifications:
  email: false
